#!/bin/sh
USAGE="PURPOSE: Similar to normal awkcel, but works faster on big input files by pre-processing to extract only necessary
    columns before calling normal awkcel."
# Functions
die(){ (echo "$USAGE"; echo "FATAL ERROR: $@")>&2; exit 1; }
warn(){ (echo "WARNING: $@")>&2; }
not(){ if eval "$@"; then return 1; else return 0; fi; }
newlines(){ awk '{for(i=1; i<=NF;i++)print $i}' "$@"; }
parse(){ awk "BEGIN{print $@}" </dev/null; }

[ $# -eq 0 ] && die "Expecting arguments"

# generally useful Variables
NL='
'
TAB='	'
BASENAME=`basename "$0" .sh`
[ "$BASENAME" == skel ] && die "$0 is a skeleton Bourne Shell script; your scripts should source it, not run it"
USAGE=${USAGE:?"$0 should have a USAGE message before sourcing skel.sh"}
echo "$BASENAME" | grep "[ $TAB]" && die "Shell script names really REALLY shouldn't contain spaces or tabs"
[ $BASENAME == "$BASENAME" ] || die "something weird with filename in '$BASENAME'"

# Temporary Filename + Directory (both, you can use either, note they'll have different random stuff in the XXXXXX part)
TMPDIR=`mktemp -d /tmp/$BASENAME.XXXXXX`
 trap "/bin/rm -rf $TMP $TMPDIR; exit" 0 1 2 3 15 # call trap "" N to remove the trap for signal N
mkdir $TMPDIR/F || die "couldn't make $TMPDIR/F"

case `uname` in
    Darwin) GSED=gsed;; # we need a sed that takes the "nu" option
    Linux)GSED=sed;;
    *)GSED=sed;; # fingers crossed...
esac
export GSED
touch $TMPDIR/PROG $TMPDIR/VARS $TMPDIR/arguments.txt
ARGIND_DIGITS=4 # make sure this matches the number of zeros below
ARGIND=0000
while [ $# -gt 0 ]; do
    case "$1" in
    -[fF]) (echo "$1"; echo "$2")
	case $1 in
	-f) [ -e "$2" ] || die "awkcel: '$2': file not found"
	    cat "$2";;
	-F) echo "$2";;
	esac >> $TMPDIR/PROG
	shift # in addition to the shift at the end of the loop
	;;
    -[qvh]) echo "$1" # other valid options
	;;
    -?*) die "unknown option '$1'";;
    *)  if echo "$1" | fgrep -q '{' && echo "$1" | fgrep -q '}'; then # must be the program
	   echo $1 | tee -a $TMPDIR/PROG # no quotes because it needs to go all on one line
	else
	    [ ".$1" = ".-" -o -e "$1" ] || die "awkcel: input TSV file '$1' not found"
	    ARGIND=`echo $ARGIND | awk '{printf "%0'$ARGIND_DIGITS'd\n",$1+1}'`
	    $GSED -nu '1p;q' "$1" | tee $TMPDIR/header.$ARGIND | newlines | tee $TMPDIR/header.$ARGIND.lines | nl > $TMPDIR/header.$ARGIND.nl
	    cat "$TMPDIR/PROG" | sed 's/[^_a-zA-Z0-9]/ /g' | newlines | sort -u >> $TMPDIR/VARS
	    COLS=`fgrep -x -f $TMPDIR/VARS $TMPDIR/header.$ARGIND.lines | awk '{printf "\t%s$\n",$0}' | grep -f - $TMPDIR/header.$ARGIND.nl | awk '{printf "%s%d",COMMA,$1;COMMA=","}'`
	    TMPTSV="$TMPDIR/F/$ARGIND.`basename "$1"`" # give it the same name as the original, but in TMPDIR/F
	    ([ ".$1" = .- ] && cat $TMPDIR/header.$ARGIND; cat "$1") | cut "-f$COLS" > "$TMPTSV"
	    echo "$TMPTSV"
	fi
	;;
    esac >> $TMPDIR/arguments.txt
    shift
done
#set -x
if awk '{printf "%s\0",$0}' $TMPDIR/arguments.txt | xargs -0 awkcel; then : # do nothing, just exit
else
    STATUS=$?
    echo "$BASENAME: awkcel failed with status $STATUS; optimized program and data are in directory $TMPDIR" >&2
    trap "" 0 1 2 3 15 # do not remove file
    exit $STATUS
fi
