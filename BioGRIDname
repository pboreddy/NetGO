#!/bin/sh
USAGE="USAGE: $0 [list of names]
PURPOSE: for each species name (long or short form) given on the command line, output one line with the following info:
	name-from-command-line	BioGRIDname	list of taxonomic IDs associated with the species
If the species on the command line is already an integer, don't touch it, and use NONE as the longer name.
All output columns are tab-separated."

die(){ (echo "$USAGE"; echo "FATAL ERROR: $@")>&2; exit 1; }
warn(){ (echo "WARNING: $@")>&2; }
not(){ if eval "$@"; then return 1; else return 0; fi; }
newlines(){ awk '{for(i=1; i<=NF;i++)print $i}' "$@"; }
parse(){ awk "BEGIN{print $@}" </dev/null; }

SANA=$HOME/src/bionets/SANA # Change this to whenever your SANA repo is
SANA=${SANA?:"environment variable SANA needs to be set to main SANA repo directory"}
[ -d $SANA ] || die "cannot open SANA repo at <$SANA>"

IGNORE_CASE=''
case "$1" in
-i) IGNORE_CASE="-i"; shift ;;
-*) die "unknown option '$1'";;
esac

for q
do
    if echo "$q" | grep -q '^[0-9]*$'; then # it's an integer already, don't touch it
	echo "$q	NONE	$q"
    else
	(
	    cd $SANA/resnik/taxons
	    Q=`echo "$q" | sed 's/[ 	.]//g' | sed 's/IID//'`
	    FILE=`ls | grep $IGNORE_CASE "$Q"`
	    #if [ `echo $FILE | wc -w` -gt 1 ]; then echo "Warning: $q" matches multiple files: $FILE >&2; fi
	    for f in $FILE; do
		newlines < $f | awk 'BEGIN{F="'"$f"'";short=substr(F,1,2); printf "%s\t%s",short,F}
		    {for(i=1;i<=NF;i++)printf "\t%s",$i}END{print ""}'
	    done
	)
    fi
done
